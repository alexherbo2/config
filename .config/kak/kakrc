# to ease development of plugins
# try to load from cwd, otherwise load from config
# potentially dangerous
# also not ideal since errors from sourcing are silenced
define-command source-here-or-in -params 2 %{
     try %{ source "%arg{1}" } catch %{ source "%arg{2}/%arg{1}" }
    #source "%arg{2}/%arg{1}"
}

# equally dangerous, but practical
hook global KakBegin .* %{
    eval -save-regs 'p' %{
        reg p %sh{
            while :; do
                if [ -f init.kak ]; then
                    printf "%s" "$PWD"
                    exit
                fi
                [ "$PWD" = / ] && exit
                cd ..
            done
        }
        try %{ source "%reg{p}/init.kak" "%reg{p}" }
    }
}

def do-or-die -params 2 %{
    try %{
        eval %arg{1}
        write-all-quit
    } catch %{
        buffer *debug*
        write %arg{2}
        quit! 1
    }
}

def smart-star -params 1 %{
    try %{
        eval -save-regs t -draft %{
            exec <a-space>
            reg / ''
            eval -itersel %{
                exec """t%arg{1}"
                reg / "%reg{t}|%reg{/}"
            }
        }
        eval -save-regs t -draft %{
            exec "<space>""t%arg{1}"
            reg / "%reg{/}%reg{t}"
        }
    } catch %{
        exec -save-regs '' %arg{1}
    }
}
map global normal * ': smart-star *<ret>'
map global normal <a-*> ': smart-star <a-*><ret>'

source-here-or-in   c-family.kak    "%val{runtime}/rc/core"
source-here-or-in   comment.kak     "%val{runtime}/rc/core"
source-here-or-in   diff.kak        "%val{runtime}/rc/core"
source-here-or-in   doc.kak         "%val{runtime}/rc/core"
source-here-or-in   formatter.kak   "%val{runtime}/rc/core"
source-here-or-in   grep.kak        "%val{runtime}/rc/core"
source-here-or-in   kakrc.kak       "%val{runtime}/rc/core"
source-here-or-in   makefile.kak    "%val{runtime}/rc/core"
source-here-or-in   make.kak        "%val{runtime}/rc/core"
source-here-or-in   man.kak         "%val{runtime}/rc/core"
source-here-or-in   python.kak      "%val{runtime}/rc/core"
source-here-or-in   sh.kak          "%val{runtime}/rc/core"

source-here-or-in   ctags.kak       "%val{runtime}/rc/base"
source-here-or-in   etc.kak         "%val{runtime}/rc/base"
source-here-or-in   file.kak        "%val{runtime}/rc/base"
source-here-or-in   git.kak         "%val{runtime}/rc/base"
source-here-or-in   go.kak          "%val{runtime}/rc/base"
source-here-or-in   javascript.kak  "%val{runtime}/rc/base"
source-here-or-in   json.kak        "%val{runtime}/rc/base"
source-here-or-in   lint.kak        "%val{runtime}/rc/base"
source-here-or-in   lua.kak         "%val{runtime}/rc/base"
source-here-or-in   markdown.kak    "%val{runtime}/rc/base"
source-here-or-in   rust.kak        "%val{runtime}/rc/base"
source-here-or-in   x11.kak         "%val{runtime}/rc/base"

source-here-or-in   autorestore.kak "%val{runtime}/rc/extra"
source-here-or-in   cmake.kak       "%val{runtime}/rc/extra"
source-here-or-in   git-tools.kak   "%val{runtime}/rc/extra"

source-here-or-in   auto-percent.kak           "%val{config}"
source-here-or-in   buffers-info.kak           "%val{config}"
source-here-or-in   expand.kak                 "%val{config}"
source-here-or-in   filetree.kak               "%val{config}"
source-here-or-in   find.kak                   "%val{config}"
source-here-or-in   friendly-session-names.kak "%val{config}"
source-here-or-in   gdb.kak                    "%val{config}"
#source-here-or-in   kak-lsp.kak                "%val{config}"
source-here-or-in   multiples.kak              "%val{config}"
source-here-or-in   phantom-selection.kak      "%val{config}"
source-here-or-in   single-process-pipe.kak    "%val{config}"
source-here-or-in   sudo-write.kak             "%val{config}"
source-here-or-in   surround.kak               "%val{config}"
source-here-or-in   vertical-selection.kak     "%val{config}"

set-option global tabstop 4
set-option global indentwidth 4
set-option global BOM none
set-option global eolformat lf
#set-option global disabled_hooks

set-option global gdb_breakpoint_active_symbol "x"
set-option global gdb_breakpoint_inactive_symbol "o"
set-option global gdb_location_symbol "->"

set-option global autoinfo command|onkey

set-option global ui_options ncurses_set_title=false

set-option global scrolloff 2,5

set-option global makecmd 'make --jobs=8'
set-option global grepcmd 'ag --filename --column --ignore tags --ignore build --ignore buildDebug'
set-option global filetree_find_cmd 'elvish -c "use find; find:find &dirs=\$false | each [f]{ echo \$f }"'
set-option global termcmd 'alacritty -e sh -c'

set-option global modelinefmt '\{%val{cursor_line},%val{cursor_char_column}} %val{bufname} {{mode_info}} {{context_info}} {red,default}%opt{gdb_indicator}{default,default}- %val{client}@[%val{session}]'

define-command -hidden text-object-indented-paragraph %{
    eval -save-regs '^' %{
        exec -draft -save-regs '' '<a-i>pZ'
        exec '<a-i>i<a-z>i'
    }
}

declare-option str expand_commands %{
    expand-impl %{ exec <a-i>b }
    expand-impl %{ exec <a-a>b }
    expand-impl %{ exec <a-i>B }
    expand-impl %{ exec <a-a>B }
    expand-impl %{ exec <a-i>r }
    expand-impl %{ exec <a-a>r }
    expand-impl %{ exec <a-i>i }
    expand-impl %{ exec <a-i>i_ }
    expand-impl %{ text-object-indented-paragraph }
    expand-impl %{ text-object-indented-paragraph; exec _ }
    expand-impl %{ exec <a-x> }
    expand-impl %{ exec <a-x>_ }
}

# TODO: revisit one day
#hook global ModeChange ".*:prompt" %{ face global StatusLine black,green }
#hook global ModeChange ".*:insert" %{ face global StatusLine black,yellow }
#hook global ModeChange ".*:normal" %{ face global StatusLine black,cyan }

# stop c and d from yanking
map global normal d \"_d
map global normal c \"_c

map global normal ';' ':'
map global normal ':' ';'

map -docstring "find" global goto p "<esc>: find<ret>"

# tab/backtab to cycle through completions
hook global InsertCompletionShow .* %{
    try %{
        exec -draft ';<a-K>^.<ret>hGh<a-K>\A\h+\z<ret>'
        map window insert <s-tab> <c-p>
        map window insert <tab> <c-n>
    }
}
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

map global normal q     ':surround<ret>'
map global normal Q     ':surround-lock<ret>'
map global normal <a-q> ':expand<ret>'
map global normal <a-Q> ''

# auto-percent mappings (kinda annoying, so disabled)
#map global normal <a-s> ': auto-percent <lt>a-s> \%<ret>'
#map global normal <a-S> ': auto-percent <lt>a-S> \%<ret>'
#map global normal s     ': auto-percent-prompt s \%<ret>'
#map global normal S     ': auto-percent-prompt S \%<ret>'
#map global normal <a-k> ': auto-percent-prompt <lt>a-k> \%<lt>a-s><ret>'
#map global normal <a-K> ': auto-percent-prompt <lt>a-K> \%<lt>a-s><ret>'

# word-related mappings
map global normal w     <a-i>w
map global normal <a-w> <a-i><a-w>
map global normal W     '"_s.<ret><a-i>w'
map global normal <a-W> '"_s.<ret><a-i><a-w>'

# replace select-onto with phantom-sel stuff; more useful
map global normal f     ': phantom-sel-add-selection<ret>'
map global normal F     ': phantom-sel-select-all; phantom-sel-clear<ret>'
map global normal <a-f> ': phantom-sel-iterate-next<ret>'
map global normal <a-F> ': phantom-sel-iterate-prev<ret>'
map global insert <a-f> '<esc>: phantom-sel-iterate-next<ret>i'
map global insert <a-F> '<esc>: phantom-sel-iterate-prev<ret>i'

# move line up/down
# not very mnemonic but whatever
map global normal t     ': exec -itersel "<lt>a-x>d%arg{1}j<lt>a-P>"<ret>'
map global normal T     ''
map global normal <a-t> ': exec -itersel "<lt>a-x>d%arg{1}k<lt>a-P>"<ret>'
map global normal <a-T> ''

map global normal <c-b> ': make<ret>'
map global normal <c-f> ''

face global SecondaryCursor black,rgb:babaa3+fg
face global Whitespace rgb:363636,default+f
face global LineNumbersWrapped rgb:606060,default+i
#face global MatchingChar default,default+r

# highlight current word
decl -hidden regex curword
hook global NormalIdle .* %{
    eval -save-regs / -draft %{ try %{
        exec -save-regs '' <space><a-i>w*
        set buffer curword "%reg{/}"
    } catch %{
        set buffer curword ''
    }}
}

addhl global/ number-lines -hlcursor -separator ' '
addhl global/ show-matching
addhl global/ dynregex '%reg{/}' 0:default,+u
addhl global/ dynregex '%opt{curword}' 0:default,rgb:3b3b3b
addhl global/ show-whitespaces
addhl global/ wrap -word -marker "â†³ "

define-command reload-all -docstring "Reload all open buffers" %{
    eval -buffer * edit!
}

define-command scratch -docstring "Open a scratch buffer" -params ..1 %{
    try %{
        eval %sh{ [ -z "$1" ] && printf fail }
        edit -scratch %arg{1}
    } catch %{
        edit -scratch *scratch*
    }
}

define-command kakrc -docstring "Open kakrc" %{
    edit ~/.config/kak/kakrc
}

define-command trim-whitespaces -docstring "Remove trailing whitespace from every line" %{
   try %{
        exec -draft '%s\h+$<ret>d'
        echo -markup "{Information}trimmed"
    } catch %{
        echo -markup "{Information}nothing to trim"
    }
}

define-command ide %{
    rename-client main
    new rename-client tools
    set global toolsclient tools
    set global jumpclient main
}

# delete the *scratch* buffer as soon as another is created, but only if it's empty
hook global BufCreate '^\*scratch\*$' %{
    hook -group delete-scratch global BufCreate '^((?!\*scratch\*).{,9}|.{10,})$' %{
        try %{
            # throw if the buffer has more than one character
            execute-keys -buffer *scratch* 'L<a-K>..<ret>'
            delete-buffer *scratch*
        }
        remove-hooks global delete-scratch
    }
}

hook global GlobalSetOption gdb_started=true %{
    map global normal <f10>   ': gdb-next<ret>'
    map global normal <f11>   ': gdb-step<ret>'
    map global normal <s-f11> ': gdb-finish<ret>'
    map global normal <f12>   ': gdb-print<ret>'
    map global normal <f9>    ': gdb-toggle-breakpoint<ret>'
    map global normal <f5>    ': gdb-continue<ret>'
}
hook global GlobalSetOption gdb_started=false %{
    unmap global normal <f10>   ': gdb-next<ret>'
    unmap global normal <f11>   ': gdb-step<ret>'
    unmap global normal <s-f11> ': gdb-finish<ret>'
    unmap global normal <f12>   ': gdb-print<ret>'
    unmap global normal <f9>    ': gdb-toggle-breakpoint<ret>'
    unmap global normal <f5>    ': gdb-continue<ret>'
}

declare-user-mode expand
map -docstring "expand" global expand <space> ': expand<ret>'

map -docstring "surround"           global user s     ': surround<ret>'
map -docstring "surround â†»"         global user S     ': surround-lock<ret>'
map -docstring "expand"             global user e     ': expand<ret>'
map -docstring "expand â†»"           global user E     ': expand; enter-user-mode -lock expand<ret>'
map -docstring "select ðŸ¡“"           global user v     ': select-down<ret>'
map -docstring "select ðŸ¡‘"           global user <a-v> ': select-up<ret>'
map -docstring "select ðŸ¡“ðŸ¡‘"          global user V     ': select-vertically<ret>'
map -docstring "trim whitespaces"   global user w     ': trim-whitespaces<ret>'
map -docstring "clip-paste after"   global user p     '<a-!>xsel --output --clipboard<ret>'
map -docstring "clip-paste before"  global user P     '!xsel --output --clipboard<ret>'
map -docstring "clip-replace"       global user R     '|xsel --output --clipboard<ret>'
map -docstring "clip-yank"          global user y     '<a-|>xsel --input --clipboard<ret>'

map global normal <a-,> ': bp<ret>'
map global normal <a-.> ': bn<ret>'
map global normal <a-r> ': e!<ret>'
map global normal <a-d> ': db<ret>'

try %{ source "%val{config}/dayjob.kak" }
