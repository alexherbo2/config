# to ease development of plugins
# try to load from cwd, otherwise load from config
# potentially dangerous
# also not ideal since errors from sourcing are silenced
def source-here-or-in -params 2 %{
     try %{ source "%arg{1}" } catch %{ source "%arg{2}/%arg{1}" }
    #source "%arg{2}/%arg{1}"
}

# load first 'init.kak' file found when going up directories
# equally dangerous, but practical
hook global KakBegin .* %{
    eval -save-regs 'p' %{
        reg p %sh{
            while :; do
                if [ -f init.kak ]; then
                    printf "%s" "$PWD"
                    exit
                fi
                [ "$PWD" = / ] && exit
                cd ..
            done
        }
        try %{ source "%reg{p}/init.kak" "%reg{p}" }
    }
}

#source-here-or-in asciidoc.kak          "%val{runtime}/rc/core"
source-here-or-in c-family.kak          "%val{runtime}/rc/core"
source-here-or-in comment.kak           "%val{runtime}/rc/core"
source-here-or-in diff.kak              "%val{runtime}/rc/core"
source-here-or-in doc.kak               "%val{runtime}/rc/core"
source-here-or-in formatter.kak         "%val{runtime}/rc/core"
source-here-or-in grep.kak              "%val{runtime}/rc/core"
source-here-or-in kakrc.kak             "%val{runtime}/rc/core"
source-here-or-in make.kak              "%val{runtime}/rc/core"
source-here-or-in makefile.kak          "%val{runtime}/rc/core"
source-here-or-in man.kak               "%val{runtime}/rc/core"
source-here-or-in python.kak            "%val{runtime}/rc/core"
source-here-or-in sh.kak                "%val{runtime}/rc/core"

source-here-or-in autowrap.kak          "%val{runtime}/rc/base"
#source-here-or-in clojure.kak           "%val{runtime}/rc/base"
#source-here-or-in css.kak               "%val{runtime}/rc/base"
source-here-or-in ctags.kak             "%val{runtime}/rc/base"
#source-here-or-in d.kak                 "%val{runtime}/rc/base"
#source-here-or-in etc.kak               "%val{runtime}/rc/base"
source-here-or-in file.kak              "%val{runtime}/rc/base"
#source-here-or-in fish.kak              "%val{runtime}/rc/base"
#source-here-or-in gas.kak               "%val{runtime}/rc/base"
source-here-or-in git.kak               "%val{runtime}/rc/base"
#source-here-or-in go.kak                "%val{runtime}/rc/base"
#source-here-or-in haskell.kak           "%val{runtime}/rc/base"
source-here-or-in html.kak              "%val{runtime}/rc/base"
#source-here-or-in ini.kak               "%val{runtime}/rc/base"
#source-here-or-in java.kak              "%val{runtime}/rc/base"
#source-here-or-in javascript.kak        "%val{runtime}/rc/base"
source-here-or-in json.kak              "%val{runtime}/rc/base"
#source-here-or-in julia.kak             "%val{runtime}/rc/base"
source-here-or-in lint.kak              "%val{runtime}/rc/base"
#source-here-or-in lisp.kak              "%val{runtime}/rc/base"
source-here-or-in lua.kak               "%val{runtime}/rc/base"
#source-here-or-in mail.kak              "%val{runtime}/rc/base"
source-here-or-in markdown.kak          "%val{runtime}/rc/base"
#source-here-or-in mercurial.kak         "%val{runtime}/rc/base"
#source-here-or-in ocaml.kak             "%val{runtime}/rc/base"
source-here-or-in perl.kak              "%val{runtime}/rc/base"
#source-here-or-in restructuredtext.kak  "%val{runtime}/rc/base"
#source-here-or-in ruby.kak              "%val{runtime}/rc/base"
#source-here-or-in rust.kak              "%val{runtime}/rc/base"
#source-here-or-in scala.kak             "%val{runtime}/rc/base"
source-here-or-in screen.kak            "%val{runtime}/rc/base"
source-here-or-in spell.kak             "%val{runtime}/rc/base"
source-here-or-in sql.kak               "%val{runtime}/rc/base"
#source-here-or-in swift.kak             "%val{runtime}/rc/base"
source-here-or-in tmux.kak              "%val{runtime}/rc/base"
source-here-or-in x11.kak               "%val{runtime}/rc/base"
source-here-or-in yaml.kak              "%val{runtime}/rc/base"
#source-here-or-in new-client.kak        "%val{runtime}/rc/base"

#source-here-or-in arch-linux.kak        "%val{runtime}/rc/extra"
#source-here-or-in autorestore.kak       "%val{runtime}/rc/extra"
#source-here-or-in cabal.kak             "%val{runtime}/rc/extra"
#source-here-or-in clang.kak             "%val{runtime}/rc/extra"
#source-here-or-in cmake.kak             "%val{runtime}/rc/extra"
#source-here-or-in coffee.kak            "%val{runtime}/rc/extra"
#source-here-or-in cucumber.kak          "%val{runtime}/rc/extra"
#source-here-or-in dart.kak              "%val{runtime}/rc/extra"
#source-here-or-in dockerfile.kak        "%val{runtime}/rc/extra"
#source-here-or-in editorconfig.kak      "%val{runtime}/rc/extra"
#source-here-or-in elixir.kak            "%val{runtime}/rc/extra"
#source-here-or-in elm.kak               "%val{runtime}/rc/extra"
#source-here-or-in exherbo.kak           "%val{runtime}/rc/extra"
source-here-or-in git-tools.kak         "%val{runtime}/rc/extra"
#source-here-or-in go-tools.kak          "%val{runtime}/rc/extra"
#source-here-or-in haml.kak              "%val{runtime}/rc/extra"
#source-here-or-in hbs.kak               "%val{runtime}/rc/extra"
#source-here-or-in i3.kak                "%val{runtime}/rc/extra"
#source-here-or-in iterm.kak             "%val{runtime}/rc/extra"
#source-here-or-in jedi.kak              "%val{runtime}/rc/extra"
#source-here-or-in just.kak              "%val{runtime}/rc/extra"
#source-here-or-in kickstart.kak         "%val{runtime}/rc/extra"
source-here-or-in kitty.kak             "%val{runtime}/rc/extra"
#source-here-or-in latex.kak             "%val{runtime}/rc/extra"
#source-here-or-in modeline.kak          "%val{runtime}/rc/extra"
#source-here-or-in moon.kak              "%val{runtime}/rc/extra"
#source-here-or-in nim.kak               "%val{runtime}/rc/extra"
#source-here-or-in php.kak               "%val{runtime}/rc/extra"
#source-here-or-in pony.kak              "%val{runtime}/rc/extra"
#source-here-or-in protobuf.kak          "%val{runtime}/rc/extra"
#source-here-or-in pug.kak               "%val{runtime}/rc/extra"
#source-here-or-in racer.kak             "%val{runtime}/rc/extra"
#source-here-or-in ragel.kak             "%val{runtime}/rc/extra"
#source-here-or-in ranger.kak            "%val{runtime}/rc/extra"
#source-here-or-in sass.kak              "%val{runtime}/rc/extra"
#source-here-or-in scheme.kak            "%val{runtime}/rc/extra"
#source-here-or-in scss.kak              "%val{runtime}/rc/extra"
source-here-or-in systemd.kak           "%val{runtime}/rc/extra"
#source-here-or-in taskpaper.kak         "%val{runtime}/rc/extra"
#source-here-or-in tmux-repl.kak         "%val{runtime}/rc/extra"
#source-here-or-in toml.kak              "%val{runtime}/rc/extra"
#source-here-or-in troff.kak             "%val{runtime}/rc/extra"
#source-here-or-in tupfile.kak           "%val{runtime}/rc/extra"
#source-here-or-in void-linux.kak        "%val{runtime}/rc/extra"
#source-here-or-in x11-repl.kak          "%val{runtime}/rc/extra"

source-here-or-in   auto-percent.kak           "%val{config}"
source-here-or-in   buffers-info.kak           "%val{config}"
source-here-or-in   expand.kak                 "%val{config}"
source-here-or-in   filetree.kak               "%val{config}"
source-here-or-in   find.kak                   "%val{config}"
source-here-or-in   friendly-session-names.kak "%val{config}"
source-here-or-in   gdb.kak                    "%val{config}"
#source-here-or-in   kak-lsp.kak                "%val{config}"
source-here-or-in   multiples.kak              "%val{config}"
source-here-or-in   phantom-selection.kak      "%val{config}"
source-here-or-in   single-process-pipe.kak    "%val{config}"
source-here-or-in   sudo-write.kak             "%val{config}"
source-here-or-in   surround.kak               "%val{config}"
source-here-or-in   vertical-selection.kak     "%val{config}"

set global tabstop 4
set global indentwidth 4
set global BOM none
set global eolformat lf
set global disabled_hooks .*-trim-indent

set global autoinfo command|onkey
set global ui_options ncurses_set_title=false
set global scrolloff 2,5

map global goto f '<esc>: open-buffers<ret>'

def open-buffers %{
    eval -itersel %{ try %{ exec -with-hooks -draft gf }}
    exec -with-hooks gf
}

try %{
    nop %opt{gdb_indicator}
    set global modelinefmt '\{%val{cursor_line},%val{cursor_char_column}} %val{bufname} {{mode_info}} {{context_info}} {red,default}%opt{gdb_indicator}{default,default}- %val{client}@[%val{session}]'
} catch %{
    set global modelinefmt '\{%val{cursor_line},%val{cursor_char_column}} %val{bufname} {{mode_info}} {{context_info}} {default,default}- %val{client}@[%val{session}]'
}
try %{ set global makecmd 'make --jobs=8' }
try %{ set global grepcmd 'ag --filename --column --ignore tags --ignore build --ignore buildDebug' }
try %{ set global filetree_find_cmd 'elvish -c "use find; find:find &dirs=\$false | each [f]{ echo \$f }"' }
try %{ set global termcmd 'alacritty -e sh -c' }

def -hidden text-object-indented-paragraph %{
    eval -save-regs '^' %{
        exec -draft -save-regs '' '<a-i>pZ'
        exec '<a-i>i<a-z>i'
    }
}
try %{ set global expand_commands %{
    expand-impl %{ exec <a-i>b }
    expand-impl %{ exec <a-a>b }
    expand-impl %{ exec <a-i>B }
    expand-impl %{ exec <a-a>B }
    expand-impl %{ exec <a-i>r }
    expand-impl %{ exec <a-a>r }
    expand-impl %{ exec <a-i>i }
    expand-impl %{ exec <a-i>i_ }
    expand-impl %{ text-object-indented-paragraph }
    expand-impl %{ text-object-indented-paragraph; exec _ }
    expand-impl %{ exec <a-x>_ }
}}

def -hidden smart-star -params 1 %{
    try %{
        exec -draft <a-space>
        eval -no-hooks -draft -save-regs '"' %{
            exec -save-regs '' "%arg{1}""""*"
            edit -scratch *smart-star-temp*
            exec '<a-P>)<a-space>i|<esc>'
        }
        try %{ exec -buffer *smart-star-temp* -save-regs '' "%%H""%val{register}/<c-r>.<ret>" }
        db *smart-star-temp*
    } catch %{
        exec -save-regs '' """%val{register}%arg{1}"
    }
}
map global normal * ': smart-star *<ret>'
map global normal <a-*> ': smart-star <lt>a-*><ret>'

# TODO: revisit one day
#hook global ModeChange ".*:prompt" %{ face global StatusLine black,green }
#hook global ModeChange ".*:insert" %{ face global StatusLine black,yellow }
#hook global ModeChange ".*:normal" %{ face global StatusLine black,cyan }

# stop c and d from yanking
map global normal d <a-d>
map global normal c <a-c>
map global normal <a-d> ''
map global normal <a-c> ''

#swap ; and :
map global normal ';' ':'
map global normal ':' ';'

map -docstring "find" global goto p "<esc>: find<ret>"

# tab/backtab to cycle through completions
hook global InsertCompletionShow .* %{
    try %{
        exec -draft ';<a-K>^.<ret>hGh<a-K>\A\h+\z<ret>'
        map window insert <s-tab> <c-p>
        map window insert <tab> <c-n>
    }
}
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

map global normal q     ': surround<ret>'
map global normal Q     ': surround-lock<ret>'
map global normal <a-q> ': expand<ret>'
map global normal <a-Q> ''

# auto-percent mappings (kinda annoying, so disabled)
#map global normal <a-s> ': auto-percent <lt>a-s> \%<ret>'
#map global normal <a-S> ': auto-percent <lt>a-S> \%<ret>'
#map global normal s     ': auto-percent-prompt s \%<ret>'
#map global normal S     ': auto-percent-prompt S \%<ret>'
#map global normal <a-k> ': auto-percent-prompt <lt>a-k> \%<lt>a-s><ret>'
#map global normal <a-K> ': auto-percent-prompt <lt>a-K> \%<lt>a-s><ret>'

# word-related mappings
map global normal w     <a-i>w
map global normal <a-w> <a-i><a-w>
map global normal W     '"_s.<ret><a-i>w'
map global normal <a-W> '"_s.<ret><a-i><a-w>'

# replace select-onto with phantom-sel stuff; more useful
map global normal f     ': phantom-sel-add-selection<ret>'
map global normal F     ': phantom-sel-select-all; phantom-sel-clear<ret>'
map global normal <a-f> ': phantom-sel-iterate-next<ret>'
map global normal <a-F> ': phantom-sel-iterate-prev<ret>'
map global insert <a-f> '<esc>: phantom-sel-iterate-next<ret>i'
map global insert <a-F> '<esc>: phantom-sel-iterate-prev<ret>i'

# move line up/down
# not very mnemonic but whatever
map global normal t     ': exec -itersel "<lt>a-x>d%arg{1}j<lt>a-P>"<ret>'
map global normal T     ''
map global normal <a-t> ': exec -itersel "<lt>a-x>d%arg{1}k<lt>a-P>"<ret>'
map global normal <a-T> ''

map global normal <c-b> ': make<ret>'
map global normal <c-f> ''

face global PrimaryCursorEol black,white+fg
face global SecondaryCursorEol black,white+fg
face global SecondaryCursor black,rgb:babaa3+fg
face global Whitespace rgb:363636,default+f
face global LineNumbersWrapped rgb:606060,default+i
face global MatchigChar black,yellow+F

# highlight current word
decl -hidden regex curword
hook global NormalIdle .* %{
    eval -save-regs / -draft %{ try %{
        exec -save-regs '' <space><a-i>w*
        set buffer curword "%reg{/}"
    } catch %{
        set buffer curword ''
    }}
}

addhl global/ number-lines -hlcursor -separator ' '
addhl global/ show-matching
addhl global/ dynregex '%reg{/}' 0:default,+u
addhl global/ dynregex '%opt{curword}' 0:default,rgb:3b3b3b
addhl global/ show-whitespaces
addhl global/ wrap -word -marker "↳ "

def reload-all -docstring "Reload all open buffers" %{
    eval -buffer * edit!
}

def scratch -docstring "Open a scratch buffer" -params ..1 %{
    try %{
        eval %sh{ [ -z "$1" ] && printf fail }
        edit -scratch %arg{1}
    } catch %{
        edit -scratch *scratch*
    }
}

def kakrc -docstring "Open kakrc" %{
    edit ~/.config/kak/kakrc
}

def trim-whitespaces -docstring "Remove trailing whitespace from every line" %{
   try %{
        exec -draft '%s\h+$<ret>d'
        echo -markup "{Information}trimmed"
    } catch %{
        echo -markup "{Information}nothing to trim"
    }
}

# delete the *scratch* buffer as soon as another is created, but only if it's empty
hook global BufCreate '^\*scratch\*$' %{
    hook -always -once global BufCreate '^(?!\*scratch\*)^.*$' %{
        try %{
            # throw if the buffer has more than one character
            exec -buffer *scratch* 'L<a-K>..<ret>'
            db *scratch*
        }
    }
}

hook global GlobalSetOption gdb_started=true %{
    map global normal <f10>   ': gdb-next<ret>'
    map global normal <f11>   ': gdb-step<ret>'
    map global normal <s-f11> ': gdb-finish<ret>'
    map global normal <f12>   ': gdb-print<ret>'
    map global normal <f9>    ': gdb-toggle-breakpoint<ret>'
    map global normal <f5>    ': gdb-continue<ret>'
}
hook global GlobalSetOption gdb_started=false %{
    unmap global normal <f10>   ': gdb-next<ret>'
    unmap global normal <f11>   ': gdb-step<ret>'
    unmap global normal <s-f11> ': gdb-finish<ret>'
    unmap global normal <f12>   ': gdb-print<ret>'
    unmap global normal <f9>    ': gdb-toggle-breakpoint<ret>'
    unmap global normal <f5>    ': gdb-continue<ret>'
}

map -docstring "select 🡓"           global user v     ': select-down<ret>'
map -docstring "select 🡑"           global user <a-v> ': select-up<ret>'
map -docstring "select 🡓🡑"          global user V     ': select-vertically<ret>'
map -docstring "trim whitespaces"   global user w     ': trim-whitespaces<ret>'
map -docstring "clip-paste after"   global user p     '<a-!>xsel --output --clipboard<ret>'
map -docstring "clip-paste before"  global user P     '!xsel --output --clipboard<ret>'
map -docstring "clip-replace"       global user R     '|xsel --output --clipboard<ret>'
map -docstring "clip-yank"          global user y     '<a-|>xsel --input --clipboard<ret>'
map -docstring "math"               global user m     ': math<ret>'

map global normal <a-,> ': prev<ret>'
map global normal <a-.> ': next<ret>'
map global normal <a-r> ': e!<ret>'
map global normal <a-d> ': db<ret>'

try %{ source "%val{config}/dayjob.kak" }
