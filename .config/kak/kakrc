# to ease development of plugins
# try to load from cwd, otherwise load from config
# potentially dangerous
# also not ideal since errors from sourcing are silenced
define-command source-here-or-in   -params 2 %{
    try %{ source "%arg{1}" } catch %{ source "%arg{2}/%arg{1}" }
    #source "%arg{2}/%arg{1}"
}

source-here-or-in   c-family.kak    "%val{runtime}/rc/core"
source-here-or-in   comment.kak     "%val{runtime}/rc/core"
source-here-or-in   diff.kak        "%val{runtime}/rc/core"
source-here-or-in   doc.kak         "%val{runtime}/rc/core"
source-here-or-in   formatter.kak   "%val{runtime}/rc/core"
source-here-or-in   grep.kak        "%val{runtime}/rc/core"
source-here-or-in   kakrc.kak       "%val{runtime}/rc/core"
source-here-or-in   makefile.kak    "%val{runtime}/rc/core"
source-here-or-in   make.kak        "%val{runtime}/rc/core"
source-here-or-in   man.kak         "%val{runtime}/rc/core"
source-here-or-in   python.kak      "%val{runtime}/rc/core"
source-here-or-in   sh.kak          "%val{runtime}/rc/core"

source-here-or-in   ctags.kak       "%val{runtime}/rc/base"
source-here-or-in   etc.kak         "%val{runtime}/rc/base"
source-here-or-in   file.kak        "%val{runtime}/rc/base"
source-here-or-in   git.kak         "%val{runtime}/rc/base"
source-here-or-in   go.kak          "%val{runtime}/rc/base"
source-here-or-in   javascript.kak  "%val{runtime}/rc/base"
source-here-or-in   json.kak        "%val{runtime}/rc/base"
source-here-or-in   lint.kak        "%val{runtime}/rc/base"
source-here-or-in   lua.kak         "%val{runtime}/rc/base"
source-here-or-in   markdown.kak    "%val{runtime}/rc/base"
source-here-or-in   rust.kak        "%val{runtime}/rc/base"
source-here-or-in   x11.kak         "%val{runtime}/rc/base"

source-here-or-in   autorestore.kak "%val{runtime}/rc/extra"
source-here-or-in   clang.kak       "%val{runtime}/rc/extra"
source-here-or-in   git-tools.kak   "%val{runtime}/rc/extra"
source-here-or-in   x11-repl.kak    "%val{runtime}/rc/extra"

source-here-or-in   auto-percent.kak           "%val{config}"
source-here-or-in   buffers-info.kak           "%val{config}"
source-here-or-in   expand.kak                 "%val{config}"
source-here-or-in   filetree.kak               "%val{config}"
source-here-or-in   find.kak                   "%val{config}"
source-here-or-in   friendly-session-names.kak "%val{config}"
source-here-or-in   gdb-helper.kak             "%val{config}"
source-here-or-in   gdb.kak                    "%val{config}"
source-here-or-in   multiples.kak              "%val{config}"
source-here-or-in   phantom-selection.kak      "%val{config}"
source-here-or-in   single-process-pipe.kak    "%val{config}"
source-here-or-in   sudo-write.kak             "%val{config}"
source-here-or-in   surround.kak               "%val{config}"
source-here-or-in   vertical-selection.kak     "%val{config}"

set-option global tabstop 4
set-option global indentwidth 4
set-option global BOM none
set-option global eolformat lf

set-option global gdb_breakpoint_active_symbol "x"
set-option global gdb_breakpoint_inactive_symbol "o"
set-option global gdb_location_symbol "->"

set-option global autoinfo command|onkey

set-option global ui_options ncurses_assistant=none

set-option global scrolloff 2,5

set-option global makecmd 'make --jobs=8'
set-option global grepcmd 'ag --filename --column --ignore tags'
set-option global termcmd 'termite -e'
set-option global filetree_find_cmd 'elvish -c "use find; echo &sep=\'
\' (find:find &dirs=\$false)"'

set-option global modelinefmt '%val{bufname} %val{cursor_line}:%val{cursor_char_column} {{context_info}} {{mode_info}} {red,default}%opt{gdb_indicator}{default,default}- %val{client}@[%val{session}]'

# stop c and d from yanking
map global normal d \"_d
map global normal c \"_c

map -docstring "find"    global goto p "<esc>:find<ret>"
map -docstring "jump to" global goto d "<esc>:ctags-search<ret>"

# tab/backtab to cycle through completions
hook global InsertCompletionShow .* %{
    map window insert <backtab> <c-p>
    map window insert <tab> <c-n>
}
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <backtab> <c-p>
}

# auto-percent mappings
map global normal <a-s> ':auto-percent <lt>a-s> \%<ret>'
map global normal <a-S> ':auto-percent <lt>a-S> \%<ret>'
map global normal s ':auto-percent-prompt s \%<ret>'
map global normal S ':auto-percent-prompt S \%<ret>'
map global normal <a-k> ':auto-percent-prompt <lt>a-k> \%<lt>a-s><ret>'
map global normal <a-K> ':auto-percent-prompt <lt>a-K> \%<lt>a-s><ret>'

# word-related mappings
map global normal w <a-i>w
map global normal <a-w> <a-i><a-w>
map global normal W     "\"_s.<ret><a-i>w"
map global normal <a-W> "\"_s.<ret><a-i>W"

# replace select-onto with phantom-sel stuff; more useful
map global normal f     ":phantom-sel-add-selection<ret>"
map global normal F     ":phantom-sel-select-all<ret>:phantom-sel-clear<ret>"
map global normal <a-f> ":phantom-sel-iterate-next<ret>"
map global normal <a-F> ":phantom-sel-iterate-prev<ret>"

#map global insert <a-f> "<a-;>:phantom-sel-iterate-next<ret>"
#map global insert <a-F> "<a-;>:phantom-sel-iterate-prev<ret>"

set-face SecondaryCursor black,rgb:babaa3
set-face Whitespace rgb:363636,default
set-face LineNumbersWrapped rgb:606060,default+i

add-highlighter global number_lines -hlcursor -separator ' '
add-highlighter global show_matching
add-highlighter global dynregex '%reg{/}' 0:default,+u
add-highlighter global show_whitespaces
add-highlighter global wrap -word

define-command reload-all -docstring "Reload all open buffers" %{
    eval -buffer * edit!
}

define-command kakrc -docstring "Open kakrc" %{
    edit ~/.config/kak/kakrc
}

define-command trim-whitespaces -docstring "Remove trailing whitespace from every line" %{
   try %{
        exec -draft '%s\h+$<ret>d'
        echo -markup "{Information}trimmed"
    } catch %{
        echo -markup "{Information}nothing to trim"
    }
}

define-command ide %{
    rename-client main
    new rename-client tools
    set global toolsclient tools
    set global jumpclient main
}

# delete the *scratch* buffer as soon as another is created, but only if it's empty
hook global BufCreate '^\*scratch\*$' %{
    hook -group delete-scratch global BufCreate '^((?!\*scratch\*).{,9}|.{10,})$' %{
        try %{
            # throw if the buffer has more than one character
            execute-keys -buffer *scratch* 'L<a-K>..<ret>'
            delete-buffer *scratch*
        }
        remove-hooks global delete-scratch
    }
}

map -docstring "surround" global user s :surround<ret>
map -docstring "surround (repeat)" global user S :surround-repeat<ret>
map -docstring "expand" global user e :expand<ret>
map -docstring "expand (repeat)" global user E :expand-repeat<ret>
map -docstring "select down" global user v :select-down<ret>
map -docstring "select up" global user <a-v> :select-up<ret>
map -docstring "select vertically" global user V :select-vertically<ret>
map -docstring "trim whitespaces" global user w :trim-whitespaces<ret>
map -docstring "clip-paste after" global user p '<a-!>xsel --output --clipboard<ret>'
map -docstring "clip-paste before" global user P '!xsel --output --clipboard<ret>'
map -docstring "clip-paste replace" global user R '|xsel --output --clipboard<ret>'
map -docstring "clip-yank" global user y '<a-|>xsel --input --clipboard<ret>'

map global normal <a-,> :bp<ret>
map global normal <a-.> :bn<ret>
map global normal <a-r> :e!<ret>
map global normal <a-d> :db<ret>
map global normal <a-q> :db!<ret>

try %{ source "%val{config}/dayjob.kak" }
