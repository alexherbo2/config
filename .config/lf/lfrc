set shell /bin/sh

#newline as IFS and fileseparator
#let's just pretend filenames can't contain the newline character
set ifs '
'
set filesep '
'
set ratios '1:3:2'

# leave some space at the top and the bottom of the screen
set scrolloff 2

# toggle options
map h set hidden!

# select what information to show
map zn set showinfo none
map zs set showinfo size
map zt set showinfo time

# sort files and show the corresponding info
map sn :set sortby name; set showinfo none
map ss :set sortby size; set showinfo size
map st :set sortby time; set showinfo time

# common directories
map gh cd ~
map gr cd /
map gj bot
map gk top
map gg

# remove yank and delete bindings
map d
map y
map p
map c

# use enter for shell commands
map <enter> read-shell

# mappings for pager and editor
map i $$PAGER "$f"
map e $$EDITOR "$f"

# execute current file
map x $"$f"
map X !"$f"

# dedicated keys for file opener actions
#map o &/bin/vendor_perl/mimeopen -- $fx
#map O $/bin/vendor_perl/mimeopen -- $fx

cmd trash ${{
    trash-put $fx
}}
map d trash; renew
cmd restore ${{
    echo 0 | trash-restore >/dev/null 2>/dev/null
}}
map D restore; renew

#define a custom `open-file` command
`open-file` is called by `open` when current file is not a directory. You may
want to use either file extensions and/or mime types here. Below uses an
editor for text files and a file opener for the rest.
 cmd open-file ${{
     case $(file --mime-type "$f" -b) in
         text/*) $EDITOR $fx;;
         image/*) mpv $fx;;
         video/*) mpv $fx;;
         audio/*) mpv $fx;;
         *) for f in $fx; do xdg-open "$f" &> /dev/null & done;;
     esac
 }}
map o open-file
map O open-file

# rename current file without overwrite
#cmd rename $[ -e "$1" ] || mv "$f" "$1"
#map r push :rename<space>

# show disk usage
#cmd usage $du -h . | less

# move current file or selected files to trash folder
# (see 'man mv' or 'mv --help' for backup options)
#cmd trash $IFS=':'; mv --backup=numbered $fx $HOME/.trash

# compress marked files with tar and gunzip
# This command takes the output name without '.tar.gz' suffix as an argument
# (e.g. "compress foo" creates "foo.tar.gz").
#cmd compress ${{
#    mkdir "$1"
#    IFS=':'; cp $fs "$1"
#    tar czvf "$1.tar.gz" "$1"
#    rm -rf "$1"
#}}

cmd test !{{
for i in $fx; do printf "%s\n" $i; done
}}

